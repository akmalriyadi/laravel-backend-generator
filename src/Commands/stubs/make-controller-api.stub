<?php

namespace {namespace};

use AkmalRiyadi\LaravelBackendGenerator\Enums\ItemOptions;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use AkmalRiyadi\LaravelBackendGenerator\Enums\PaginateType;
use App\Services\Api\{ModelName}ServiceApi;
use AkmalRiyadi\LaravelBackendGenerator\Resources\DefaultResource;
use App\Http\Requests\{ModelName}\Update{ModelName}Request;
use App\Http\Requests\{ModelName}\Store{ModelName}Request;

class {controllerName} extends Controller
{
    private $mainServiceApi;

    public function __construct({ModelName}ServiceApi $mainServiceApi)
    {
        $this->mainServiceApi = $mainServiceApi;
    }

    /**
     * Display a listing of the resource.
     * @param Request
     * @return JsonResponse
     */
    public function index(Request $request)
    {
        return $this->mainServiceApi->all(request: $request, itemOptions: ItemOptions::DEFAULT, withOption: true, filterOption: true, paginateOption: true, paginateRequest: true, resourceOption: true)->toJson();
    }

    /**
     * Display a listing trashed
     * @param Request
     * @return JsonResponse
     */
    public function trashed(Request $request)
    {
        return $this->mainServiceApi->all(request: $request, itemOptions: ItemOptions::ONLY_TRASHED, withOption: true, filterOption: true, paginateOption: true, paginateRequest: true, resourceOption: true)->toJson();
    }

    /**
     * Display specific resource
     * @param string $id
     * @return JsonResponse
     */
    public function show($id)
    {
        return $this->mainServiceApi->findOrFail($id, withOption: true, resourceOption: true)->toJson();
    }

    /**
     * Store a newly created resource in storage.
     * @param $request
     * @return JsonResponse
     */
    public function store(Store{ModelName}Request $request)
    {
        return $this->mainServiceApi->create($request)->toJson();
    }

    /**
     * Update the specified resource in storage.
     * @param $request
     * @param string $id
     * @return JsonResponse
     */
    public function update($id, Update{ModelName}Request $request)
    {
        return $this->mainServiceApi->update($id, $request)->toJson();
    }

    /**
     * Remove the specified resource from storage.
     * @param string $id
     * @return JsonResponse
     */
    public function delete($id)
    {
        return $this->mainServiceApi->delete($id)->toJson();
    }

    /**
     * Force Remove the specified resource from storage.
     * @param string $id
     * @return JsonResponse
     */
    public function forceDelete($id)
    {
        return $this->mainServiceApi->forceDelete($id)->toJson();
    }

    /**
     * Restore the specified resource from storage.
     * @param string $id
     * @return JsonResponse
     */
    public function restore($id)
    {
        return $this->mainServiceApi->restore($id)->toJson();
    }
}
